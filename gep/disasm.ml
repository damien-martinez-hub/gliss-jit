(*
 * $Id: disasm.ml,v 1.6 2009/02/23 00:07:34 casse Exp $
 * Copyright (c) 2008, IRIT - UPS <casse@irit.fr>
 *
 * This file is part of OGliss.
 *
 * OGliss is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * OGliss is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGliss; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *)

(*open Lexing

exception UnsupportedMemory of Irg.spec

(*module OrderedString = struct
	type t = string
	let compare s1 s2 = String.compare s1 s2
end
module StringSet = Set.Make(OrderedString)*)

module OrderedType = struct
	type t = Toc.c_type
	let compare s1 s2 = if s1 = s2 then 0 else if s1 < s2 then (-1) else 1
end
module TypeSet = Set.Make(OrderedType)


(* options *)
let nmp: string ref = ref ""
let quiet = ref false
let verbose = ref false
let options = [
	("v", Arg.Set verbose, "verbose mode");
	("q", Arg.Set verbose, "quiet mode")
]

let free_arg arg =
	if !nmp = ""
	then nmp := arg
	else raise (Arg.Bad "only one NML file required") 
let usage_msg = "SYNTAX: gep [options] NML_FILE\n\tGenerate code for a simulator"
let _ =
	Arg.parse options free_arg usage_msg;
	if !nmp = "" then begin
		prerr_string "ERROR: one NML file must be given !\n";
		Arg.usage options usage_msg;
		exit 1
	end


(** Build the given directory.
	@param path			Path of the directory.
	@raise Sys_error	If there is an error. *)
let makedir path =
	if not (Sys.file_exists path) then
		try 
			Unix.mkdir path 0o740
		with Unix.Unix_error (code, _, _) ->
			raise (Sys_error (Printf.sprintf "cannot create \"%s\": %s" path (Unix.error_message code)))
	else
		let stats = Unix.stat path in
		if stats.Unix.st_kind <> Unix.S_DIR
		then raise (Sys_error (Printf.sprintf "cannot create directory \"%s\": file in the middle" path))


(** Get the processor name.
	@return	Processor name.
	@raise	Sys_error	Raised if the proc is not defined. *)
let get_proc _ =
	match Irg.get_symbol "proc" with
	  Irg.LET(_, Irg.STRING_CONST name) -> name
	| _ -> raise (Sys_error "no \"proc\" definition available")


(** Format date (in seconds) and return a stirng.
	@param date	Date to format.
	@return		Date formatted as a string. *)
let format_date date =
	let tm = Unix.localtime date in
	Printf.sprintf "%0d/%02d/%02d %02d:%02d:%02d"
		tm.Unix.tm_year tm.Unix.tm_mon tm.Unix.tm_mday
		tm.Unix.tm_hour tm.Unix.tm_min tm.Unix.tm_sec


(* Test if memory or register attributes contains ALIAS.
	@param attrs	Attributes to test.
	@return			True if it contains "alias", false else. *)
let rec contains_alias attrs =
	match attrs with
	  [] -> false
	| (Irg.ALIAS _)::_ -> true
	| _::tl -> contains_alias tl



(** Build a source file.
	@param f	Function to generate the content of the file.
	@param proc	Processor name.
	@param file	file to create.
	@param dir	Directory containing the includes.
	@raise Sys_error	If the file cannot be created. *)
let make_include f info file =
	let uproc = String.uppercase info.Toc.proc in
	let path = info.Toc.spath ^ "/" ^ file ^ ".c" in
	if not !quiet then Printf.printf "creating \"%s\"\n" path;
	info.Toc.out <- open_out path;
	
	(* output header *)
	let def = Printf.sprintf "GLISS_%s_%s_C" uproc (String.uppercase file) in
	Printf.fprintf info.Toc.out "/* Generated by gep (%s) copyright (c) 2008 IRIT - UPS */\n" (format_date (Unix.time ()));
	Printf.fprintf info.Toc.out "#ifndef %s\n" def;
	Printf.fprintf info.Toc.out "#define %s\n" def;
	
	(* output the content *)
	f info;
		
	(* output tail *)
	Printf.fprintf info.Toc.out "\n#endif /* %s */\n" def;
	close_out info.Toc.out*)


(** Build the file XXX/include/disasm.c file *)
(*let make_disasm_c info =
	
	let proc = info.Toc.proc in
	let out = info.Toc.out in
	let uproc = String.uppercase proc in
	Printf.fprintf out "\n/* %s_disasm */\n\n" proc;
	Printf.fprintf out "static void UNKNOWN_disasm (char *buf, %s_inst_t *inst);" proc;
	Iter.iter
		(fun _ i -> Printf.fprintf
			out
			"\nstatic void %s_disasm (char *buf, %s_inst_t *inst){};"
			(String.lowercase (Iter.get_name i))
			proc)
		();
	Printf.fprintf out "\n\n/* %s function table */\n\n" proc;
	Printf.fprintf out "typedef void (*disasm_t)(char *buf, %s_inst_t * inst);\n" proc;
	Printf.fprintf out "static disasm_t disasm_table[] = {\n";
	Printf.fprintf out "\tUNKNOWN_disasm";
	Iter.iter
		(fun _ i -> Printf.fprintf
			out
			",\n\t%s_disasm"
			(String.lowercase (Iter.get_name i)))
		();
	Printf.fprintf out "\n};";
	Printf.fprintf out "\n\n void %s_disasm(char *buf, %s_inst_t *inst) {\n" proc proc;
  	Printf.fprintf out "\tassert(inst->ident < %s_MAX_IDENT);\n" uproc;
	Printf.fprintf out "\tdisasm_table[inst->ident](buf, inst);\n};\n\n" *)

(*(* main program *)
let _ =
	try	
		begin
			let lexbuf = Lexing.from_channel (open_in !nmp) in
			Parser.top Lexer.main lexbuf;
			let info = Toc.info () in
			if not !quiet then Printf.printf "creating \"include/\"\n";
			makedir "include";
			if not !quiet then Printf.printf "creating \"%s\"\n" info.Toc.ipath;
			makedir info.Toc.ipath;
			make_include make_disasm_c info "disasm"
		end

	with
	  Parsing.Parse_error ->
		Lexer.display_error "syntax error"; exit 2
	| Lexer.BadChar chr ->
		Lexer.display_error (Printf.sprintf "bad character '%c'" chr); exit 2
	| Sem.SemError msg ->
		Lexer.display_error (Printf.sprintf "semantics error : %s" msg); exit 2
	| Irg.IrgError msg ->
		Lexer.display_error (Printf.sprintf "ERROR: %s" msg); exit 2
	| Sem.SemErrorWithFun (msg, fn) ->
		Lexer.display_error (Printf.sprintf "semantics error : %s" msg);
		fn (); exit 2;
	| Sys_error msg ->
		Printf.eprintf "ERROR: %s\n" msg; exit 1
	| Failure e ->
		Lexer.display_error e; exit 3
*)


(* argument list *)
let nmp: string ref = ref ""
let quiet = ref false
let verbose = ref false
let out = ref "disasm.c"
let options = [
	("-v", Arg.Set verbose, "verbose mode");
	("-q", Arg.Set quiet, "quiet mode");
	("-o", Arg.Set_string out, "output file")
]

(* argument decoding *)
let free_arg arg =
	if !nmp = ""
	then nmp := arg
	else raise (Arg.Bad "only one NML file required") 
let usage_msg = "SYNTAX: gep [options] NML_FILE\n\tGenerate code for a simulator"
let _ =
	Arg.parse options free_arg usage_msg;
	if !nmp = "" then begin
		prerr_string "ERROR: one NML file must be given !\n";
		Arg.usage options usage_msg;
		exit 1
	end


(** Generate code to perform disassembly.
	@param out	Output channel.
	@param inst	Current instruction.
	@param expr	Syntax expression.
	@raise Error	If there is an unsupported syntax expression. *)
let rec gen_disasm info inst expr =
	let out = output_string info.Toc.out in
	match expr with
	  Irg.FORMAT (fmt, args) ->
		Printf.fprintf info.Toc.out "buffer += sprintf(buffer, \"%s\"" fmt;
		List.iter
			(fun arg -> out ", "; Toc.gen_expr info arg)
			args;
		out ");\n"
	| Irg.CONST (_, Irg.STRING_CONST str) ->
		Printf.fprintf info.Toc.out "buffer += sprintf(buffer,  \"%%s\", \"%s\");\n" (Toc.cstring str)
	| Irg.NONE
	| Irg.CANON_EXPR _
	| Irg.REF _
	| Irg.FIELDOF _
	| Irg.ITEMOF _
	| Irg.BITFIELD _
	| Irg.UNOP _
	| Irg.BINOP _
	| Irg.IF_EXPR _
	| Irg.SWITCH_EXPR _
	| Irg.CONST _
	| Irg.COERCE _  -> Toc.error_on_expr "bad syntax expression" expr
	| Irg.ELINE (file, line, e) ->
		Toc.locate_error file line (gen_disasm info inst) e


(** Perform the disassembling of the given instruction.
	@param inst		Instruction to get syntax from.
	@param out		Output to use. *)
let disassemble inst out info =
	info.Toc.out <- out;
	info.Toc.inst <- Iter.get_name inst;
	
	(* get syntax *)
	let syntax =
		try
			match Iter.get_attr inst "syntax" with
			  Iter.STAT _ -> raise (Toc.Error "syntax must be an expression")
			| Iter.EXPR e -> e
		with Not_found -> raise (Toc.Error "no attribute") in

	(* disassemble *)
	let params = Iter.get_params inst in
	Irg.param_stack params;
	let (stats, syntax) = Toc.prepare_expr info Irg.NOP syntax in
	Toc.declare_temps info;
	gen_disasm info inst syntax;
	Toc.cleanup_temps info;	
	Irg.param_unstack params


let _ =
	try
		App.process !nmp
			(fun info ->
				let maker = App.maker () in
				maker.App.get_instruction <- (fun inst dict ->
					("disassemble", Templater.TEXT (fun out -> disassemble inst out info)) :: dict);
				let dict = App.make_env info maker in			
				if not !quiet then (Printf.printf "creating \"%s\"\n" !out; flush stdout);
				Templater.generate dict "disasm.c" !out
			)
	with Toc.Error msg ->
		Printf.fprintf stdout "ERROR: %s\n" msg;
	| Toc.LocError (file, line, f) ->
		Printf.fprintf stderr "ERROR: %s:%d: " file line;
		f stderr;
		output_char stderr '\n'
	| Toc.PreError f ->
		output_string stderr "ERROR: ";
		f stderr;
		output_char stderr '\n'


