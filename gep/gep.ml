(*
 * $Id: gep.ml,v 1.1 2008/11/18 10:09:58 casse Exp $
 * Copyright (c) 2008, IRIT - UPS <casse@irit.fr>
 *
 * This file is part of OGliss.
 *
 * OGliss is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * OGliss is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OGliss; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *)
open Lexing

(* options *)
let options = []
let nmp: string ref = ref ""

let free_arg arg =
	if !nmp = ""
	then nmp := arg
	else raise (Arg.Bad "only one NML file required") 
let usage_msg = "SYNTAX: gep [options] NML_FILE\n\tGenerate code for a simulator"
let _ =
	Arg.parse options free_arg usage_msg;
	if !nmp = "" then begin
		prerr_string "ERROR: one NML file must be given !\n";
		Arg.usage options usage_msg;
		exit 1
	end


(** Build the given directory.
	@param path			Path of the directory.
	@raise Sys_error	If there is an error. *)
let makedir path =
	if not (Sys.file_exists path) then
		try 
			Unix.mkdir path 0o740
		with Unix.Unix_error (code, _, _) ->
			raise (Sys_error (Printf.sprintf "cannot create \"%s\": %s" path (Unix.error_message code)))
	else
		let stats = Unix.stat path in
		if stats.Unix.st_kind <> Unix.S_DIR
		then raise (Sys_error (Printf.sprintf "cannot create directory \"%s\": file in the middle" path))


(** Get the processor name.
	@return	Processor name.
	@raise	Sys_error	Raised if the proc is not defined. *)
let get_proc _ =
	match Irg.get_symbol "proc" with
	  Irg.LET(_, Irg.STRING_CONST name) -> name
	| _ -> raise (Sys_error "no \"proc\" definition available")


(** Format date (in seconds) and return a stirng.
	@param date	Date to format.
	@return		Date formatted as a string. *)
let format_date date =
	let tm = Unix.localtime date in
	Printf.sprintf "%0d/%d/%d %d:%d:%d"
		tm.Unix.tm_year tm.Unix.tm_mon tm.Unix.tm_mday
		tm.Unix.tm_hour tm.Unix.tm_min tm.Unix.tm_sec
	

(** Build the file "proc/include/id.h"
	@param proc		Name of the processor. *)
let make_id_h proc =
	let uproc = String.uppercase proc in
	let out = open_out (proc ^ "/include/id.h") in
	
	(* output header *)
	let def = Printf.sprintf "GLISS_%s_ID_H" uproc in
	Printf.fprintf out "/* Generated by gep (%s) copyright (c) 2008 IRIT - UPS */\n" (format_date (Unix.time ()));
	Printf.fprintf out "#ifndef %s\n" def;
	Printf.fprintf out "#define %s\n" def;

	(* instructions codes *)
	Printf.fprintf out "\n/* instruction codes */\n";
	Iter.iter
		(fun _ i -> Printf.fprintf
			out
			"#define %s_%s %d\n"
			uproc
			(Iter.get_name i)
			(Iter.get_id i))
		();
	
	(* output tail *)
	Printf.fprintf out "\n#endif /* %s */\n" def


(* main program *)
let _ =
	try	
		begin
			let lexbuf = Lexing.from_channel (open_in !nmp) in
			Parser.top Lexer.main lexbuf;
			let proc = get_proc () in
			makedir proc;
			makedir (proc ^ "/include");
			make_id_h proc
		end

	with
	  Parsing.Parse_error ->
		Lexer.display_error "syntax error"; exit 2
	| Lexer.BadChar chr ->
		Lexer.display_error (Printf.sprintf "bad character '%c'" chr); exit 2
	| Sem.SemError msg ->
		Lexer.display_error (Printf.sprintf "semantics error : %s" msg); exit 2
	| Irg.IrgError msg ->
		Lexer.display_error (Printf.sprintf "ERROR: %s" msg); exit 2
	| Sem.SemErrorWithFun (msg, fn) ->
		Lexer.display_error (Printf.sprintf "semantics error : %s" msg);
		fn (); exit 2;
	| Sys_error msg ->
		Printf.eprintf "ERROR: %s\n" msg; exit 1
	| Failure e ->
		Lexer.display_error e; exit 3

