/* Generated by gep ($(date)) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H
#define GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H

#include <assert.h>
#include <$(proc)/api.h>
#include <$(proc)/macros.h>

#if defined(__cplusplus)
extern  "C"
{
#endif

/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

#define DECODE_DTRACE_TABLE

#include <$(proc)/decode.h>
#ifndef $(PROC)_DTRACE_CACHE
#error "GEP option '-gen-with-trace' must be used with decode32_dtrace module"
#endif

/* hack : Enable cache if gep option is on 
(without having to  move decode32.c to templates) */
$(if GLISS_INF_DECODE_CACHE)
#define $(PROC)_INF_DECODE_CACHE
$(end)
$(if GLISS_FIXED_DECODE_CACHE)
#define $(PROC)_FIXED_DECODE_CACHE
$(end)
$(if GLISS_LRU_DECODE_CACHE)
#define $(PROC)_LRU_DECODE_CACHE
$(end)
$(if GLISS_NO_MALLOC)
#define $(PROC)_NO_MALLOC
$(end)

/* decoder macros */
#define __EXTRACT(mask, offset_mask, inst)	  ( (uint32_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS(mask, offset_mask, inst, n)    (((int32_t)__EXTRACT(mask, offset_mask, inst) << (n)) >> (n))

static int $(proc)_instr_UNKNOWN_decode(uint32_t code_inst, $(proc)_inst_t *inst)
{
	inst->ident = $(PROC)_UNKNOWN;

	return 0;
}

$(foreach instructions)
static int $(proc)_instr_$(IDENT)_decode(uint32_t code_inst, $(proc)_inst_t *inst)
{
	$(if has_param)//uint32_t mask;
	
	inst->ident = $(PROC)_$(IDENT);

	/* put other parameters */
	$(foreach params)
	$(PROC)_$(IDENT)_$(PARAM) = $(decoder);
	$(end)
	
	$(if is_inst_branch)return 1;$(else)return 0;$(end)
}

$(else)	
	inst->ident = $(PROC)_$(IDENT);

	$(if is_inst_branch)return 1;$(else)return 0;$(end)
}

$(end)
$(end)


typedef int $(proc)_decode_function_t(uint32_t code_inst, $(proc)_inst_t *inst);

static $(proc)_decode_function_t *$(proc)_decode_table[] =
{
	$(proc)_instr_UNKNOWN_decode$(foreach instructions),
	$(proc)_instr_$(IDENT)_decode$(end)
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void $(proc)_free_inst($(proc)_inst_t *inst) {
}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H */
