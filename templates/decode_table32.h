/* Generated by gep ($(date)) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H
#define GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H

#include <assert.h>
#include <$(proc)/api.h>
#include <$(proc)/macros.h>

#if defined(__cplusplus)
extern  "C"
{
#endif

/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

/* hack : Enable cache if gep option is on 
(without having to  move decode32.c to templates) */
$(if GLISS_INF_DECODE_CACHE)
#define $(PROC)_INF_DECODE_CACHE
$(end)
$(if GLISS_FIXED_DECODE_CACHE)
#define $(PROC)_FIXED_DECODE_CACHE
$(end)
$(if GLISS_LRU_DECODE_CACHE)
#define $(PROC)_LRU_DECODE_CACHE
$(end)
$(if GLISS_NO_MALLOC)
#define $(PROC)_NO_MALLOC
$(end)


/* decoder macros */
#define __EXTRACT(mask, offset_mask, inst)	  ( (uint32_t)((inst) & (mask)) >> (offset_mask))
#define __EXTS(mask, offset_mask, inst, n)    (((int32_t)__EXTRACT(mask, offset_mask, inst) << (n)) >> (n))

static$(if !GLISS_NO_MALLOC) $(proc)_inst_t *$(else) void $(end)$(proc)_instr_UNKNOWN_decode(uint32_t code_inst$(if GLISS_NO_MALLOC), $(proc)_inst_t *inst$(end))
{
$(if !GLISS_NO_MALLOC)
	$(proc)_inst_t *inst = malloc(sizeof($(proc)_inst_t));
$(end)
	inst->ident = $(PROC)_UNKNOWN;

	$(if !GLISS_NO_MALLOC)return inst;$(end)
}

$(foreach instructions)
static$(if !GLISS_NO_MALLOC) $(proc)_inst_t *$(else) void $(end)$(proc)_instr_$(IDENT)_decode(uint32_t code_inst$(if GLISS_NO_MALLOC), $(proc)_inst_t *inst$(end))
{
	$(if has_param)//uint32_t mask;
	
$(if !GLISS_NO_MALLOC)
	$(proc)_inst_t *inst = ($(proc)_inst_t *)malloc(sizeof($(proc)_inst_t) );
$(end)
	inst->ident = $(PROC)_$(IDENT);

	/* put other parameters */
	$(foreach params)
	$(PROC)_$(IDENT)_$(PARAM) = $(decoder);
	$(end)
	$(if !GLISS_NO_MALLOC)return inst;$(end)
}

$(else)$(if !GLISS_NO_MALLOC)$(proc)_inst_t *inst = malloc(sizeof($(proc)_inst_t));
	
$(end)	
	inst->ident = $(PROC)_$(IDENT);

	$(if !GLISS_NO_MALLOC)return inst;$(end)
}

$(end)
$(end)


typedef $(if !GLISS_NO_MALLOC)$(proc)_inst_t *$(else)void $(end)$(proc)_decode_function_t(uint32_t code_inst$(if GLISS_NO_MALLOC), $(proc)_inst_t *inst$(end));

static $(proc)_decode_function_t *$(proc)_decode_table[] =
{
	$(proc)_instr_UNKNOWN_decode$(foreach instructions),
	$(proc)_instr_$(IDENT)_decode$(end)
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void $(proc)_free_inst($(proc)_inst_t *inst) {
	assert(inst);
	// NB : inst->instrinput is allocate with the same malloc which allocate an instr
	
	$(if !GLISS_INF_DECODE_CACHE)
    $(if !GLISS_FIXED_DECODE_CACHE)
    $(if !GLISS_LRU_DECODE_CACHE)
	  free(inst);
	$(end)
	$(end)
	$(end)
}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H */
