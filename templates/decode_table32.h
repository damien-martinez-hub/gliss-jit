/* Generated by gep ($(date)) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H
#define GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H


#if defined(__cplusplus)
extern  "C"
{
#endif

#include "../include/$(proc)/api.h"

/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, (e))



/*
	donne la valeur d'une zone mémoire (une instruction) en ne prenant
	en compte que les bits indiqués par le mask

	on fait un ET logique entre l'instruction et le masque,
	on conserve seulement les bits indiqués par le masque
	et on les concatène pour avoir un nombre sur 32 bits

	on suppose que le masque n'a pas plus de 32 bits à 1,
	sinon débordement

	instr : instruction (de 32 bits)
	mask  : masque (32 bits aussi)
*/
uint32_t valeur_sur_mask_bloc(uint32_t instr, uint32_t mask)
{
	int i;
	uint32_t tmp_mask;

	/* on fait un parcours du bit de fort poids de instr[0]
	à celui de poids faible de instr[nb_bloc-1], "de gauche à droite" */

	tmp_mask = mask;
	for (i = 31; i >= 0; i--)
	{
		/* le bit i du mask est 1 ? */
		if (tmp_mask & 0x80000000UL)
		{
			/* si oui, recopie du bit i de l'instruction
			à droite du resultat avec decalage prealable */
			res <<= 1;
			res |= ((instr >> i) & 0x01);
		}
		tmp_mask <<= 1;
	}
	return res;
}

$(proc)_inst_t *$(proc)_instr_unknown_decode(uint32_t code_inst)
{
	$(proc)_inst_t *res = malloc(sizeof($(proc)_inst_t));
	res->ident = $(PROC)_UNKNOWN;
	res->instrinput = 0;
	return res;
}

$(foreach instructions)
$(proc)_inst_t *$(proc)_instr$(ICODE)_decode(uint32_t code_inst)
{
	$(if has_param)uint32_t mask;
	$(proc)_inst_t *res = malloc(sizeof($(proc)_inst_t));
	res->ident = $(PROC)_$(IDENT);
	res->instrinput = malloc(sizeof($(proc)_ii_t) * $(num_params));
	
	$(foreach params)mask = $(mask_32)UL;
	$(PROC)_$(IDENT)_$(PARAM)(res) = valeur_sur_mask_bloc(code_inst, mask);
	$(end)
	return res;
}

$(else)$(proc)_inst_t *res = malloc(sizeof($(proc)_inst_t));
	res->ident = $(PROC)_$(IDENT);
	res->instrinput = 0;
	return res;
}

$(end)
$(end)


typedef $(proc)_inst_t *$(proc)_decode_function(uint32_t code_inst);

$(proc)_decode_function $(proc)_decode_table[] =
{
	$(proc)_instr_unknown_decode$(foreach instructions),
	$(proc)_instr$(ICODE)_decode$(end)
};



#if defined(__cplusplus)
}
#endif

#endif /* GLISS_$(PROC)_INCLUDE_$(PROC)_DECODE_TABLE_H */
